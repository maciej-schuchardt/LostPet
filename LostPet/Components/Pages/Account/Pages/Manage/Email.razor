@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using LostPet.Data
@using Utils

@attribute [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
@inject UserManager<ApplicationUser> UserManager
@* @inject IEmailSender<ApplicationUser> EmailSender *@
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>Zmień dane</PageTitle>

<h3 style="color: white; text-align: center;">Zmień dane</h3>

<div class="row justify-content-center">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <div class="form-floating mb-3">
                <input style="background-color: rgb(17, 39, 51); color: rgb(232, 237, 235) !important;" type="text" value="@email" class="form-control" placeholder="Please enter your email." disabled />
                <label for="email" class="form-label label-custom">Aktualny email</label>
            </div>
            <div class="form-floating mb-3">
                <InputText style="background-color: rgb(17, 39, 51); color: rgb(232, 237, 235) !important;" @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Please enter new email." />
                <label style="color: #6c757d; !important" for="new-email" class="form-label label-custom">Nowy email</label>
            </div>
            <div class="form-floating mb-3">
                <input style="background-color: rgb(17, 39, 51); color: rgb(232, 237, 235) !important;" value="@phoneNumber" class="form-control" disabled/>
                <label for="phone-number" class="form-label label-custom">Aktualny numer telefonu</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." style="background-color: rgb(17, 39, 51); color: rgb(232, 237, 235) !important;"/>
                <label style="color: #6c757d; !important" for="phone-number" class="form-label label-custom">Nowy numer telefonu</label>
            </div>
            @* <button type="submit" class="w-100 btn btn-lg btn-primary">Zapisz zmiany</button> *@
            <button type="submit" class="w-100 btn btn-lg btn-primary col-sm-12" style="background-color: rgb(0, 104, 74); border: 1px solid rgb(0, 237, 100);">
                Zapisz zmiany
            </button>
        </EditForm>
    </div>
</div>

<style>
    .label-custom::after {
        background-color: inherit !important;
    }
</style>

@code {
    private ApplicationUser user = default!;
    private string? email;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        // username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        email = await UserManager.GetEmailAsync(user);

        Input.NewEmail ??= email;
        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is not null && Input.NewEmail != email)
        {
            var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
            var result = await UserManager.ChangeEmailAsync(user, Input.NewEmail, code);
            if (result.Succeeded)
            {
                // message = "Error changing email.";
                // return;
                var setUserNameResult = await UserManager.SetUserNameAsync(user, Input.NewEmail);
                // if (!setUserNameResult.Succeeded)
                // {
                // message = "Error changing user name.";
                // return;
                // }

                // await SignInManager.RefreshSignInAsync(user);

            }

            // In our UI email and user name are one and the same, so when we update the email
            // we need to update the user name.
             

            // message = "Thank you for confirming your email change.";
        }

        if (Input.PhoneNumber is not null && Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                // RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }

            // RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
        }

        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        email = await UserManager.GetEmailAsync(user);

        Input.NewEmail ??= email;
        Input.PhoneNumber ??= phoneNumber;
        await SignInManager.RefreshSignInAsync(user);
        await InvokeAsync(() => this.StateHasChanged());

        // var userId = await UserManager.GetUserIdAsync(user);
        // var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //     NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
        //     new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        // await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));
    }

    // private async Task OnSendEmailVerificationAsync()
    // {
    //     if (email is null)
    //     {
    //         return;
    //     }

    //     var userId = await UserManager.GetUserIdAsync(user);
    //     var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
    //     code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
    //     var callbackUrl = NavigationManager.GetUriWithQueryParameters(
    //         NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
    //         new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

    //     await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));
    // }

    private sealed class InputModel
    {
        // [Required]
        [EmailAddress]
        public string? NewEmail { get; set; }

        [Phone]
        public string? PhoneNumber { get; set; }
    }
}
