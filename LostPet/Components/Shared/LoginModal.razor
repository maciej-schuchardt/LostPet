@using LostPet.Components.Pages.Account
@using LostPet.Components.Pages.Account.Pages
@using LostPet.Components.Shared
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using LostPet.Data
@using Utils

@attribute [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<Modal Id=@Id Title=@Title Enabled=@Enabled>
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Email" class="form-control text-black" autocomplete="username" aria-required="true" placeholder="name@example.com" style="background-color: rgb(17, 39, 51); color: rgb(232, 237, 235) !important;" />
            <label for="email" class="form-label label-custom" style="color: rgb(232, 237, 235)">Email</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" style="background-color: rgb(17, 39, 51); color: rgb(232, 237, 235) !important;" />
            <label for="password" class="form-label label-custom" style="color: rgb(232, 237, 235)">Hasło</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
        <div class="modal-footer" style="border-top: none">
            <button type="submit" class="w-100 btn btn-lg btn-primary" style="background-color: rgb(0, 104, 74); border: 1px solid rgb(0, 237, 100);">
                Zaloguj się
            </button>
        </div>
    </EditForm>
</Modal>

@code {
    [Parameter]
    public required string Id { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Enabled { get; set; }

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Error: Nieudana próba logowania.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [RegularExpression(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$", ErrorMessage = "Niepoprawny email!")]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
